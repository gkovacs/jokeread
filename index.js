// Generated by LiveScript 1.3.1
(function(){
  var root, J, stop_synthesis, synthesize_word_for_tag, getVideoTag, synthesize_next_word, synthesize_word_and_highlight, synthesize_word, find_next_break, getIPA, split_sentences, split_words, getlevel, addWord, addSentence, addJoke, getUrlParameters, have_ipadict, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
  root = typeof exports != 'undefined' && exports !== null ? exports : this;
  J = $.jade;
  root.lang = 'en';
  root.synthesize_word_queue = [];
  stop_synthesis = function(){
    root.synthesize_word_queue = [];
    return getVideoTag()[0].pause();
  };
  synthesize_word_for_tag = function(word, video_tag){
    console.log('synthesize_word_for_tag');
    console.log(word);
    console.log(video_tag);
    video_tag.attr('src', 'http://speechsynth.herokuapp.com/speechsynth?' + $.param({
      lang: root.lang,
      word: word
    }));
    video_tag[0].currentTime = 0;
    return video_tag[0].play();
  };
  getVideoTag = function(){
    var video_tag;
    video_tag = $('video');
    if (video_tag.length === 0) {
      video_tag = J('video').css({
        display: 'none'
      }).on('ended', function(){
        console.log('video ended!');
        return synthesize_next_word(video_tag);
      });
      video_tag.appendTo('body');
    }
    return video_tag;
  };
  synthesize_next_word = function(video_tag){
    var ref$, next_word, next_tag;
    video_tag = video_tag != null
      ? video_tag
      : getVideoTag();
    $('.bolded').removeClass('bolded');
    if (root.synthesize_word_queue.length > 0) {
      ref$ = root.synthesize_word_queue.shift(0), next_word = ref$[0], next_tag = ref$[1];
      next_tag.addClass('bolded');
      return synthesize_word_for_tag(next_word, video_tag);
    }
  };
  synthesize_word_and_highlight = function(word, tag){
    var video_tag;
    video_tag = getVideoTag();
    root.synthesize_word_queue.push([word, tag]);
    if (video_tag[0].paused) {
      return synthesize_next_word(video_tag);
    }
  };
  synthesize_word = function(word){
    return synthesize_word_and_highlight(word, $());
  };
  out$.find_next_break = find_next_break = function(text, start){
    var earliest_next_break, i$, ref$, len$, letter, new_idx;
    earliest_next_break = text.length;
    for (i$ = 0, len$ = (ref$ = ['?', '!', '.']).length; i$ < len$; ++i$) {
      letter = ref$[i$];
      new_idx = text.indexOf(letter, start);
      if (new_idx === -1) {
        continue;
      }
      if (new_idx < earliest_next_break) {
        earliest_next_break = new_idx;
      }
    }
    return earliest_next_break;
  };
  out$.getIPA = getIPA = function(word){
    var ipa, x;
    ipa = ipadict_en[word.trim().toLowerCase()];
    if (ipa == null) {
      if (word.indexOf('-') !== -1) {
        return (function(){
          var i$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = word.split('-')).length; i$ < len$; ++i$) {
            x = ref$[i$];
            results$.push(getIPA(x));
          }
          return results$;
        }()).join('-');
      }
      return word;
    }
    return ipa;
  };
  out$.split_sentences = split_sentences = function(text){
    var output, idx, next_break;
    output = [];
    idx = 0;
    for (;;) {
      next_break = find_next_break(text, idx);
      if (next_break === text.length) {
        break;
      }
      output.push(slice$.call(text, idx, next_break + 1 || 9e9).join(''));
      idx = next_break + 1;
    }
    return output;
  };
  out$.split_words = split_words = function(text){
    var output, curword, end_word, i$, len$, c;
    output = [];
    curword = [];
    end_word = function(){
      if (curword.length > 0) {
        output.push({
          type: 'word',
          text: curword.join('')
        });
        return curword = [];
      }
    };
    for (i$ = 0, len$ = text.length; i$ < len$; ++i$) {
      c = text[i$];
      if ([' ', ',', '.', '?', '!'].indexOf(c) !== -1) {
        end_word();
        output.push({
          type: 'silent',
          text: c
        });
      } else {
        curword.push(c);
      }
    }
    end_word();
    return output;
  };
  getlevel = function(){
    return $('#level_selector_input').val().trim();
  };
  addWord = function(word_text, sentence_span){
    var word_span;
    word_span = J('span.word');
    word_span.text(getIPA(word_text));
    word_span.data({
      text: word_text
    });
    word_span.click(function(){
      if (getlevel() === 'word') {
        stop_synthesis();
        console.log(word_text);
        return synthesize_word_and_highlight(word_text, word_span);
      }
    });
    return word_span.appendTo(sentence_span);
  };
  addSentence = function(sentence_text, container){
    var sentence_span, i$, ref$, len$, ref1$, type, text;
    sentence_span = J('span');
    for (i$ = 0, len$ = (ref$ = split_words(sentence_text)).length; i$ < len$; ++i$) {
      ref1$ = ref$[i$], type = ref1$.type, text = ref1$.text;
      if (type === 'silent') {
        J('span').text(text).appendTo(sentence_span);
      } else {
        addWord(text, sentence_span);
      }
    }
    sentence_span.click(function(){
      var i$, ref$, len$, x, results$ = [];
      $('.highlighted').removeClass('highlighted');
      sentence_span.addClass('highlighted');
      if (getlevel() === 'sentence') {
        stop_synthesis();
        for (i$ = 0, len$ = (ref$ = sentence_span.find('span.word')).length; i$ < len$; ++i$) {
          x = ref$[i$];
          results$.push(synthesize_word_and_highlight($(x).data('text'), $(x)));
        }
        return results$;
      }
    });
    return sentence_span.appendTo(container);
  };
  addJoke = function(joketext){
    var container, i$, ref$, len$, sentence;
    container = J('span');
    for (i$ = 0, len$ = (ref$ = split_sentences(joketext)).length; i$ < len$; ++i$) {
      sentence = ref$[i$];
      addSentence(sentence, container);
    }
    container.appendTo('#contents');
    return J('br').appendTo('#contents');
  };
  out$.getUrlParameters = getUrlParameters = function(){
    var url, hash, map, parts;
    url = window.location.href;
    hash = url.lastIndexOf('#');
    if (hash !== -1) {
      url = url.slice(0, hash);
    }
    map = {};
    parts = url.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m, key, value){
      return map[key] = decodeURIComponent(value).split('+').join(' ');
    });
    return map;
  };
  $(document).ready(function(){
    var dictfile, condition;
    dictfile = '/ipadict_en.json';
    condition = getUrlParameters().condition;
    if (condition != null) {
      if (condition === '0') {
        dictfile = '/ipadict_en.json';
      }
      if (condition === '1') {
        dictfile = '/ipadict_en_obf1.json';
      }
      if (condition === '2') {
        dictfile = '/ipadict_en_obf2.json';
      }
    }
    return $.getJSON(dictfile, function(data){
      root.ipadict_en = data;
      return have_ipadict();
    });
  });
  have_ipadict = function(){
    var level_selector_div, level_selector_input, level_selector_options;
    level_selector_div = J('div#level_selector_div');
    level_selector_input = J('input(type="text" id="level_selector_input" value="sentence" list="level_options")');
    level_selector_options = J('datalist(id="level_options")');
    level_selector_options.append(J('option').text('sentence'));
    level_selector_options.append(J('option').text('word'));
    level_selector_div.append([J('span').text('Speech synthesis level:'), level_selector_input, level_selector_options]);
    level_selector_div.appendTo('#contents');
    return $.get('/jokes_list.txt', function(data){
      var i$, ref$, len$, joke, results$ = [];
      for (i$ = 0, len$ = (ref$ = data.split('\r\n').join('\n').split('\n\n')).length; i$ < len$; ++i$) {
        joke = ref$[i$];
        results$.push(addJoke(joke));
      }
      return results$;
    });
  };
}).call(this);
